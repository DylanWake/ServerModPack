clouds = off
oldLighting = false
underwaterOverlay = false
vignette = false
sun = false

# 3D texture
#texture.composite.gaux1=textures/inversion_lut.dat TEXTURE_3D RGBA32F 64 64 64 RGBA FLOAT

# Raw textures (binary dump) can also be loaded:
#   texture.<stage>.<name>=<path> <type> <internalFormat> <dimensions> <pixelFormat> <pixelType>
# Where:
#   <type> is one of: TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_RECTANGLE
#   <internalFormat> is the texture format, see "shaders.txt" Texture Formats for the available names
#   <dimensions> is a list of texture dimensions, depends on the texture type
#    <pixelFormat> is the pixel format, see "shaders.txt" Pixel Formats for the available names
#   <pixelType> is the pixel type, see "shaders.txt" Pixel Types for the available names.
# For example:
#   texture.composite.gaux1=textures/lut_1d.dat TEXTURE_1D RGBA32F 64 RGBA FLOAT
#   texture.composite.gaux1=textures/lut_3d.dat TEXTURE_3D RGBA32F 64 64 64 RGBA FLOAT

texture.noise=textures/blueNoiseRGB.png
texture.composite.colortex0=minecraft:textures/atlas/blocks.png
texture.deferred.colortex3=minecraft:textures/atlas/blocks.png
flip.composite3.colortex0=true
texture.gbuffers.gaux2=textures/RippleAnimation2.png
texture.deferred.colortex0=textures/Caustics.png
texture.deferred.depthtex0=minecraft:textures/atlas/blocks_s.png
flip.deferred_pre.colortex0=true
flip.deferred11.colortex0=true
texture.composite.colortex4=textures/Caustics.png
texture.composite.depthtex2=minecraft:textures/atlas/blocks_s.png


program.deferred.enabled=true
program.deferred1.enabled=false
program.deferred2.enabled=true
program.deferred3.enabled=true
program.deferred4.enabled=true
program.deferred5.enabled=true
program.deferred6.enabled=true
program.deferred7.enabled=true
program.deferred8.enabled=true
program.deferred9.enabled=true
program.deferred10.enabled=true
program.deferred11.enabled=true
program.deferred12.enabled=true


program.composite.enabled=true
program.composite1.enabled=true
program.composite2.enabled=true
program.composite3.enabled=true
program.composite4.enabled=true
program.composite5.enabled=true
program.composite6.enabled=true
program.composite7.enabled=true
program.composite8.enabled=true
program.composite9.enabled=true
program.composite10.enabled=true
program.composite11.enabled=true
program.composite12.enabled=true
program.composite13.enabled=true
program.composite14.enabled=true
program.composite15.enabled=true


blend.gbuffers_water=ONE ZERO ONE ZERO
blend.gbuffers_hand=ONE ZERO ONE ZERO
blend.gbuffers_hand_water=ONE ZERO ONE ZERO
blend.gbuffers_entities = ONE ZERO ONE ZERO
blend.gbuffers_spidereyes = ONE ZERO ONE ZERO
blend.gbuffers_beaconbeam = ONE ZERO ONE ZERO
blend.gbuffers_terrain = ONE ZERO ONE ZERO
blend.gbuffers_textured = ONE ZERO ONE ZERO
blend.shadow = ONE ZERO ONE ZERO

blend.gbuffers_weather = ONE ONE ONE ONE
blend.gbuffers_armor_glint = ONE_MINUS_DST_COLOR ONE ONE ONE
blend.gbuffers_damagedblock = DST_COLOR ZERO ONE ZERO


screen = <empty> <empty> TEXTURE_RESOLUTION ADAPTIVE_PATH_TRACING_RESOLUTION <empty> <empty> [Atmosphere] [Shadow] [Lighting] [Texture] [RayTracing] [Reflection] \
         [Water] [Postprocessing] <empty> <empty> Version [Others]
    screen.Atmosphere = <empty> <empty> CLOUDS_IN_GI CLOUDS_IN_AMBIENT CIRRUS_CLOUDS CUMULUS_CLOUDS CLOUDS_BLOCKY <empty> <empty> <empty> GODRAYS \
                        GODRAYS_STAINED_GLASS_TINT VOLUMETRIC_LIGHT_STRENGTH
    screen.Shadow = shadowMapResolution shadowDistance SHADOW_MAP_BIAS sunPathRotation <empty> RAY_TRACE_SHADOW SCREEN_SPACE_SHADOW CLOUD_SHADOW SUNLIGHT_LEAK_FIX
    screen.Shadow.columns = 1
    screen.Lighting = <empty> <empty> SUNLIGHT_BRIGHTNESS TORCHLIGHT_COLOR_TEMPERATURE GI_LIGHT_BLOCK_INTENSITY GI_LIGHT_TORCH_INTENSITY <empty> <empty> HELD_LIGHT \
                      GI_SUNLIGHT_STAINED_GLASS_TINT <empty> <empty> GLOWING_REDSTONE_BLOCK GLOWING_EMERALD_BLOCK GLOWING_LAPIS_LAZULI_BLOCK
    screen.Texture = TEXTURE_RESOLUTION NORMAL_MAP_STRENGTH ADAPTIVE_PATH_TRACING_RESOLUTION FORCE_WET_EFFECT RAIN_SPLASH_EFFECT RAIN_SPLASH_BILATERAL <empty> \
                     [Parallax] [Specular]
    screen.Texture.columns = 1
        screen.Parallax = <empty> <empty> PARALLAX SMOOTH_PARALLAX ADAPTIVE_PARALLAX_RESOLUTION <empty> PARALLAX_DEPTH
        screen.Parallax.columns = 1
        screen.Specular = SPEC_EMISSIVE SPEC_SMOOTHNESS_AS_ROUGHNESS PHYSICALLY_BASED_MAX_ROUGHNESS FULL_RT_REFLECTIONS <empty> SPEC_CHANNEL_SMOOTHNESS \
                          SPEC_CHANNEL_METALNESS SPEC_CHANNEL_EMISSIVE
        screen.Specular.columns = 1
    screen.RayTracing = <empty> <empty> shadowMapResolution shadowDistance <empty> <empty> GI_RAY_COUNT GI_SECONDARY_SAMPLES DIFFUSE_TRACE_LENGTH RAYTRACE_GEOMETRY_QUALITY \
                        <empty> <empty> MAX_BLEND_WEIGHT GI_SCREEN_SPACE_TRACING CLOUDS_IN_GI CAVE_GI_LEAK_FIX
    screen.Reflection = <empty> <empty> REFLECTION_TRACE_LENGTH <empty> FULL_RT_REFLECTIONS SCREEN_SPACE_CONNECTION_REFLECTION REFLECTION_SCREEN_SPACE_TRACING
    screen.Reflection.columns = 1
    screen.Water = <empty> WATER_PARALLAX WATER_WAVE_HEIGHT <empty> WATER_FOG_DENSITY UNDERWATER_REFLECTION_STRENGTH
    screen.Water.columns = 1
    screen.Postprocessing = <empty> <empty> TONEMAP_OPERATOR TONEMAP_CURVE EXPOSURE SATURATION GAMMA BLOOM_AMOUNT BLACK_DEPTH WHITE_CLIP <empty> <empty> MOTION_BLUR \
                            MOTION_BLUR_INTENSITY POST_SHARPENING [AntiAliasing]
        screen.AntiAliasing = <empty> FINAL_FXAA PIXEL_LOOK AA_STYLE <empty> SKIP_AA
        screen.AntiAliasing.columns = 1
    screen.Others = <empty> <empty> VISUALIZE_DANGEROUS_LIGHT_LEVEL <empty> SKYLIGHT_FIX <empty> WEATHER
    screen.Others.columns = 1


sliders=FINAL_FXAA SHADOW_MAP_BIAS RAYTRACE_GEOMETRY_QUALITY WHITE_CLIP TONEMAP_OPERATOR UNDERWATER_REFLECTION_STRENGTH WATER_WAVE_HEIGHT SPEC_CHANNEL_SMOOTHNESS \
        SPEC_CHANNEL_METALNESS SPEC_CHANNEL_EMISSIVE REFLECTION_TRACE_LENGTH shadowDistance SUNLIGHT_BRIGHTNESS TORCHLIGHT_COLOR_TEMPERATURE GI_LIGHT_BLOCK_INTENSITY \
        GI_LIGHT_TORCH_INTENSITY TONEMAP_CURVE MOTION_BLUR_INTENSITY EXPOSURE GAMMA SATURATION BLACK_DEPTH BLOOM_AMOUNT POST_SHARPENING WATER_FOG_DENSITY shadowMapResolution \
        VOLUMETRIC_LIGHT_STRENGTH PARALLAX_DEPTH NORMAL_MAP_STRENGTH GI_SECONDARY_SAMPLES GI_RAY_COUNT DIFFUSE_TRACE_LENGTH REFLECTION_TRACE_LENGTH TEXTURE_RESOLUTION \
        MAX_BLEND_WEIGHT sunPathRotation


uniform.vec2.ScreenSize = vec2(viewWidth, viewHeight)
uniform.vec2.ScreenTexel = vec2(1.0/viewWidth, 1.0/viewHeight)
uniform.vec2.HalfScreen = vec2((floor(viewWidth * 0.5) + 1.0)/viewWidth, (floor(viewHeight * 0.5) + 1.0)/viewHeight)

variable.int.bayerMatrix = 30600
variable.float.weylNth0 = fmod(bayerMatrix / pow (4, frameCounter % 8), 4.0)
variable.float.weylNth1 = fmod(bayerMatrix / pow (4, frameCounter % 16 / 2), 4.0)
uniform.vec2.JitterSampleOffset = vec2((weylNth0 / 2.0 - 1.0) / viewWidth, (weylNth1 / 2.0 - 1.0) / viewHeight)

variable.float.lightAngle = -signum(sunAngle * 2.0 - 1.0)
variable.float.worldLightVectorLength = sqrt(shadowModelViewInverse.2.0 * shadowModelViewInverse.2.0 + shadowModelViewInverse.2.1 * shadowModelViewInverse.2.1 + shadowModelViewInverse.2.2 * shadowModelViewInverse.2.2)
variable.float.worldLightVectorX = shadowModelViewInverse.2.0 / worldLightVectorLength
variable.float.worldLightVectorY = shadowModelViewInverse.2.1 / worldLightVectorLength
variable.float.worldLightVectorZ = shadowModelViewInverse.2.2 / worldLightVectorLength
uniform.vec3.worldLightVector = vec3(worldLightVectorX, worldLightVectorY, worldLightVectorZ)
variable.float.worldSunVectorX = worldLightVectorX * lightAngle
variable.float.worldSunVectorY = worldLightVectorY * lightAngle
variable.float.worldSunVectorZ = worldLightVectorZ * lightAngle
uniform.vec3.worldSunVector = vec3(worldSunVectorX, worldSunVectorY, worldSunVectorZ)

variable.int.functionFTemp = floor(pow(viewWidth * viewHeight, 0.333333))
uniform.int.altRTDiameter = functionFTemp - functionFTemp % 2

variable.float.FractedCameraPositionX = frac(cameraPosition.x + 0.5)
variable.float.FractedCameraPositionY = frac(cameraPosition.y + 0.5)
variable.float.FractedCameraPositionZ = frac(cameraPosition.z + 0.5)
uniform.vec3.FractedCameraPosition = vec3(if(equals(FractedCameraPositionX, 0.0, 0.0), 1.0, FractedCameraPositionX), if(equals(FractedCameraPositionY, 0.0, 0.0), 1.0, FractedCameraPositionY), if(equals(FractedCameraPositionZ, 0.0, 0.0), 1.0, FractedCameraPositionZ))

uniform.vec3.cameraPositionDiff = vec3(cameraPosition.x - previousCameraPosition.x, cameraPosition.y - previousCameraPosition.y, cameraPosition.z - previousCameraPosition.z)

uniform.float.nightBrightness = 0.0001 + 0.0019 * nightVision

uniform.float.timeMidnight = clamp(-worldSunVectorY * 10.0, 0.0, 1.0)

variable.float.sunVectorVariable1 = 0.28 * (1.0 - exp(-abs(worldSunVectorY) * 40.0)) / abs(worldSunVectorY)
variable.float.sunVectorVariable2 = clamp(abs(worldSunVectorY) * 40.0, 0.0, 1.0) * if(between(worldSunVectorY, -2, 0), nightBrightness, 1.0)
variable.float.colorSunlightX = exp((-0.175 - wetness * 0.5) * sunVectorVariable1) * sunVectorVariable2 * 0.976708
variable.float.colorSunlightY = exp((-0.405 - wetness * 0.5) * sunVectorVariable1) * sunVectorVariable2 * 0.946058
variable.float.colorSunlightZ = exp((-0.995 - wetness * 0.5) * sunVectorVariable1) * sunVectorVariable2 * 0.871758
uniform.vec3.colorSunlight = vec3(colorSunlightX, colorSunlightY, colorSunlightZ)

variable.float.cameraPosCenterDiffX = floor(cameraPosition.x + 0.4999) - floor(previousCameraPosition.x + 0.4999)
variable.float.cameraPosCenterDiffY = floor(cameraPosition.y + 0.4999) - floor(previousCameraPosition.y + 0.4999)
variable.float.cameraPosCenterDiffZ = floor(cameraPosition.z + 0.4999) - floor(previousCameraPosition.z + 0.4999)
uniform.vec3.cameraPosCenterDiff = vec3(cameraPosCenterDiffX, cameraPosCenterDiffY, cameraPosCenterDiffZ)
